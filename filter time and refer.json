{"paragraphs":[{"text":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\nimport spark.implicits._\n\ncase class LogRecord( clientIp: String, clientIdentity: String, user: String, dateTime: String, request:String,statusCode:Int, bytesSent:Long, referer:String, userAgent:String )\ncase class Log(clientIp: String, dateTime: String, reqest:String, referer: String)\n\nval PATTERN = \"\"\"^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\S+) \"(\\S+)\" \"([^\"]*)\"\"\"\".r\ndef parseLogLine(log: String): LogRecord = {\n      try {\n        val res = PATTERN.findFirstMatchIn(log)\n \n        if (res.isEmpty) {\n          //println(\"Rejected Log Line: \" + log)\n          LogRecord(\"Empty\", \"-\", \"-\", \"\", \"\",  -1, -1, \"-\", \"-\" )\n        }\n        else {\n          val m = res.get\n          // NOTE:   HEAD does not have a content size.\n          if (m.group(9).equals(\"-\")) {\n            LogRecord(m.group(1), m.group(2), m.group(3), m.group(4),\n              m.group(6), m.group(8).toInt, 0, m.group(10), m.group(11))\n          }\n          else if(m.group(10) == (m.group(10).slice(0,m.group(10).length-4) + \".css\")) {\n              LogRecord(\"Empty\", \"-\", \"-\", \"\", \"\",  -1, -1, \"-\", \"-\" )\n          }\n          else {\n            LogRecord(m.group(1), m.group(2), m.group(3), m.group(4),\n              m.group(6), m.group(8).toInt, m.group(9).toLong, m.group(10), m.group(11))\n          }\n        }\n      } catch\n      {\n        case e: Exception =>\n          //println(\"Exception on line:\" + log + \":\" + e.getMessage);\n          LogRecord(\"Empty\", \"-\", \"-\", \"\", \"-\", -1, -1, \"-\", \"-\" )\n      }\n    }\n\n    val logFile =  sc.textFile(\"/home/tranhoangvinh/Desktop/hcmut_access_2017.txt\")\n\n    val accesslog = logFile.map(parseLogLine).filter(!_.clientIp.equals(\"Empty\"))\n    \n    val log_full = accesslog.map(x => Log(x.asInstanceOf[LogRecord].clientIp, x.asInstanceOf[LogRecord].dateTime.slice(0,20), x.asInstanceOf[LogRecord].request, x.asInstanceOf[LogRecord].referer))\n    \n    val log_with_timestamp = log_full.toDF().withColumn(\"timestamp\", unix_timestamp($\"dateTime\",\"dd/MMM/yyyy:HH:mm:ss\").cast(\"timestamp\")).drop(\"dateTime\").orderBy($\"clientIp\")\n    \n    var count = 0\n    \n    val List_ip_filter = log_with_timestamp.select(\"clientIp\").collect().toList.distinct.map(x=> x.get(0)).map(x =>  log_with_timestamp.filter(y => y.getString(0).equals(x)))\n\n    val duration = List_ip_filter.map(x => {  \n        count =  count + 1; \n        val names = Window.partitionBy('clientIp).orderBy('timestamp); \n        val withPreviousDateTime =  x.withColumn(\"previousTime\", lag('timestamp, 1) over names).withColumn(\"duration\",unix_timestamp('timestamp) - unix_timestamp('previousTime)) ; \n        withPreviousDateTime.registerTempTable(\"data_full_\" + count.toString);\n        withPreviousDateTime;\n    })\n    \n    \n    duration.map(x => {\n        var hit = 1\n        val client_ip = x.map(y => y(0).asInstanceOf[String]).collect.head.toString\n        val array_refer = x.map(y => y(2).asInstanceOf[String]).collect\n        val array_duration = x.map(y => y(5).asInstanceOf[Long]).collect\n        var name = array_refer(0)\n        if (array_refer.length != 1){\n            for (i<-1 to array_refer.length - 1){\n                if(array_refer(i) != array_refer(i-1)) { \n                    hit = hit + 1\n                    name = name + \" , \" + array_refer(i)\n                }\n                else{\n                    if(array_duration(i) > 3){\n                        hit = hit + 1\n                        name = name + \" , \" + array_refer(i) + \"(\" + array_duration(i) + \")\"\n                    }\n                }\n            }\n        }\n         println(client_ip.toString + \": \" + name + \" => \" + hit.toString )\n     })\n    \n    \n","user":"anonymous","dateUpdated":"2018-04-13T09:23:17+0700","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":365,"optionOpen":false}}},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.expressions.Window\nimport org.apache.spark.sql.functions._\nimport spark.implicits._\ndefined class LogRecord\ndefined class Log\nPATTERN: scala.util.matching.Regex = ^(\\S+) (\\S+) (\\S+) \\[([\\w:/]+\\s[+\\-]\\d{4})\\] \"(\\S+) (\\S+) (\\S+)\" (\\d{3}) (\\S+) \"(\\S+)\" \"([^\"]*)\"\nparseLogLine: (log: String)LogRecord\nlogFile: org.apache.spark.rdd.RDD[String] = /home/tranhoangvinh/Desktop/hcmut_access_2017.txt MapPartitionsRDD[1] at textFile at <console>:35\naccesslog: org.apache.spark.rdd.RDD[LogRecord] = MapPartitionsRDD[3] at filter at <console>:43\nlog_full: org.apache.spark.rdd.RDD[Log] = MapPartitionsRDD[4] at map at <console>:47\nlog_with_timestamp: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [clientIp: string, reqest: string ... 2 more fields]\ncount: Int = 0\nList_ip_filter: List[org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]] = List([clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: string, reqest: string ... 2 more fields], [clientIp: ...warning: there was one deprecation warning; re-run with -deprecation for details\nduration: List[org.apache.spark.sql.DataFrame] = List([clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 more fields], [clientIp: string, reqest: string ... 4 m..."}]},"apps":[],"jobName":"paragraph_1523326275113_-569660918","id":"20180410-091115_1959964440","dateCreated":"2018-04-10T09:11:15+0700","dateStarted":"2018-04-13T09:18:02+0700","dateFinished":"2018-04-13T09:19:51+0700","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:261"},{"text":"%sql\n\nSelect * from data_full_6   \n\n","user":"anonymous","dateUpdated":"2018-04-12T11:37:18+0700","config":{"colWidth":12,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":274,"optionOpen":false,"setting":{"stackedAreaChart":{"style":"stack"}},"commonSetting":{},"keys":[{"name":"clientIp","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"reqest","index":1,"aggr":"sum"}]},"helium":{}},"1":{"graph":{"mode":"table","height":93,"optionOpen":false}}},"editorSetting":{"language":"sql","editOnDblClick":false},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Table or view not found: data_full_6; line 1 pos 14\nset zeppelin.spark.sql.stacktrace = true to see full stacktrace"}]},"apps":[],"jobName":"paragraph_1523326482016_-180220054","id":"20180410-091442_1338892399","dateCreated":"2018-04-10T09:14:42+0700","dateStarted":"2018-04-12T11:37:18+0700","dateFinished":"2018-04-12T11:38:26+0700","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:262"},{"text":"%sql\n","user":"anonymous","dateUpdated":"2018-04-10T10:24:10+0700","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sql"},"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1523330650249_-1781985042","id":"20180410-102410_1216224571","dateCreated":"2018-04-10T10:24:10+0700","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:263"}],"name":"filter time and refer","id":"2DC3195ZT","angularObjects":{"2D8JYZUAW:shared_process":[],"2D9QHP846:shared_process":[],"2D7QVQQXK:shared_process":[],"2D8XEHD7Y:shared_process":[],"2DA9CACMT:shared_process":[],"2D833R4QT:shared_process":[],"2D8SQ5DB8:shared_process":[],"2D9UKMTM5:shared_process":[],"2DA9SKS2Y:shared_process":[],"2D7R5DMNF:shared_process":[],"2D8C4X116:shared_process":[],"2D926N6T3:shared_process":[],"2D9AFXHSN:shared_process":[],"2D7Y1QX23:shared_process":[],"2D995HA9M:shared_process":[],"2D9PUQQQA:shared_process":[],"2DA3FWZ7U:shared_process":[],"2DATS555J:shared_process":[],"2D94RPZCV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}